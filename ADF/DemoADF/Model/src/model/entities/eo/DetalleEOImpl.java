package model.entities.eo;

import oracle.jbo.Key;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Dec 27 15:04:17 CST 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DetalleEOImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        IdDetalle {
            public Object get(DetalleEOImpl obj) {
                return obj.getIdDetalle();
            }

            public void put(DetalleEOImpl obj, Object value) {
                obj.setIdDetalle((DBSequence)value);
            }
        }
        ,
        IdMovimiento {
            public Object get(DetalleEOImpl obj) {
                return obj.getIdMovimiento();
            }

            public void put(DetalleEOImpl obj, Object value) {
                obj.setIdMovimiento((Number)value);
            }
        }
        ,
        IdProducto {
            public Object get(DetalleEOImpl obj) {
                return obj.getIdProducto();
            }

            public void put(DetalleEOImpl obj, Object value) {
                obj.setIdProducto((Number)value);
            }
        }
        ,
        Cantidad {
            public Object get(DetalleEOImpl obj) {
                return obj.getCantidad();
            }

            public void put(DetalleEOImpl obj, Object value) {
                obj.setCantidad((Number)value);
            }
        }
        ,
        Subtotal {
            public Object get(DetalleEOImpl obj) {
                return obj.getSubtotal();
            }

            public void put(DetalleEOImpl obj, Object value) {
                obj.setSubtotal((Number)value);
            }
        }
        ,
        MovimientoEO {
            public Object get(DetalleEOImpl obj) {
                return obj.getMovimientoEO();
            }

            public void put(DetalleEOImpl obj, Object value) {
                obj.setMovimientoEO((MovimientoEOImpl)value);
            }
        }
        ,
        ProductoEO {
            public Object get(DetalleEOImpl obj) {
                return obj.getProductoEO();
            }

            public void put(DetalleEOImpl obj, Object value) {
                obj.setProductoEO((EntityImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(DetalleEOImpl object);

        public abstract void put(DetalleEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int IDDETALLE = AttributesEnum.IdDetalle.index();
    public static final int IDMOVIMIENTO = AttributesEnum.IdMovimiento.index();
    public static final int IDPRODUCTO = AttributesEnum.IdProducto.index();
    public static final int CANTIDAD = AttributesEnum.Cantidad.index();
    public static final int SUBTOTAL = AttributesEnum.Subtotal.index();
    public static final int MOVIMIENTOEO = AttributesEnum.MovimientoEO.index();
    public static final int PRODUCTOEO = AttributesEnum.ProductoEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DetalleEOImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("model.entities.eo.DetalleEO");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for IdDetalle, using the alias name IdDetalle.
     * @return the IdDetalle
     */
    public DBSequence getIdDetalle() {
        return (DBSequence)getAttributeInternal(IDDETALLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for IdDetalle.
     * @param value value to set the IdDetalle
     */
    public void setIdDetalle(DBSequence value) {
        setAttributeInternal(IDDETALLE, value);
    }

    /**
     * Gets the attribute value for IdMovimiento, using the alias name IdMovimiento.
     * @return the IdMovimiento
     */
    public Number getIdMovimiento() {
        return (Number)getAttributeInternal(IDMOVIMIENTO);
    }

    /**
     * Sets <code>value</code> as the attribute value for IdMovimiento.
     * @param value value to set the IdMovimiento
     */
    public void setIdMovimiento(Number value) {
        setAttributeInternal(IDMOVIMIENTO, value);
    }

    /**
     * Gets the attribute value for IdProducto, using the alias name IdProducto.
     * @return the IdProducto
     */
    public Number getIdProducto() {
        return (Number)getAttributeInternal(IDPRODUCTO);
    }

    /**
     * Sets <code>value</code> as the attribute value for IdProducto.
     * @param value value to set the IdProducto
     */
    public void setIdProducto(Number value) {
        setAttributeInternal(IDPRODUCTO, value);
    }

    /**
     * Gets the attribute value for Cantidad, using the alias name Cantidad.
     * @return the Cantidad
     */
    public Number getCantidad() {
        return (Number)getAttributeInternal(CANTIDAD);
    }

    /**
     * Sets <code>value</code> as the attribute value for Cantidad.
     * @param value value to set the Cantidad
     */
    public void setCantidad(Number value) {
        setAttributeInternal(CANTIDAD, value);
    }

    /**
     * Gets the attribute value for Subtotal, using the alias name Subtotal.
     * @return the Subtotal
     */
    public Number getSubtotal() {
        return (Number)getAttributeInternal(SUBTOTAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Subtotal.
     * @param value value to set the Subtotal
     */
    public void setSubtotal(Number value) {
        setAttributeInternal(SUBTOTAL, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity MovimientoEOImpl.
     */
    public MovimientoEOImpl getMovimientoEO() {
        return (MovimientoEOImpl)getAttributeInternal(MOVIMIENTOEO);
    }

    /**
     * Sets <code>value</code> as the associated entity MovimientoEOImpl.
     */
    public void setMovimientoEO(MovimientoEOImpl value) {
        setAttributeInternal(MOVIMIENTOEO, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getProductoEO() {
        return (EntityImpl)getAttributeInternal(PRODUCTOEO);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setProductoEO(EntityImpl value) {
        setAttributeInternal(PRODUCTOEO, value);
    }


    /**
     * @param idDetalle key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(DBSequence idDetalle) {
        return new Key(new Object[]{idDetalle});
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        this.getMovimientoEO().calcularTotal();
        super.doDML(operation, e);
    }
}
